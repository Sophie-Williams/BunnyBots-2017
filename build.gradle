buildscript {
    ext.kotlin_version = "1.2.10"

    repositories {
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "gradle.plugin.jaci.openrio.gradle:GradleRIO:2018.01.11"
        classpath "net.saliman:gradle-cobertura-plugin:2.4.0"
        classpath "org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.1"
    }
}

apply plugin: "java"
apply plugin: "kotlin"
apply plugin: "jaci.openrio.gradle.GradleRIO"
apply plugin: "net.saliman.cobertura"
apply plugin: "com.github.kt3k.coveralls"
tasks.whenTaskAdded { task ->
    if (task.name == "deploy") task.dependsOn 'assemble'
}
check.dependsOn "ktlint"

repositories {
    jcenter()
    maven { url 'https://jitpack.io' }
    maven { url 'http://first.wpi.edu/FRC/roborio/maven/development' }
    maven { url 'https://raw.githubusercontent.com/Open-RIO/Maven-Mirror/master/m2' }
}

configurations {
    ktlint
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    compile "openrio.mirror.third.ctre:CTRE-phoenix-java:5.1.2.1"

    compile wpilib()
    compile navx() {
        exclude module: 'athena'
        exclude module: 'wpilibj-java'
    }
    compile ctre()
    compile pathfinder()

    ktlint 'com.github.shyiko:ktlint:0.9.0'

    testCompile "org.easytesting:fest-assert:1.4"
    testCompile "junit:junit:4.12"
    testRuntime "org.slf4j:slf4j-api:1.7.10"
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

deploy {
    targets {
        target('roborio', jaci.openrio.gradle.frc.RoboRIO) {
            team = 2521
            addresses << '10.25.21.89'
        }
    }

    artifacts {
        artifact('main', jaci.openrio.gradle.frc.FRCJavaArtifact) {
            targets << 'roborio'

            debug = false
        }
    }
}

//wpi {
//    wpilibVersion = '...'
//    ntcoreVersion = '...'
//    opencvVersion = '...'
//    cscoreVersion = '...'
//    wpiutilVersion = '...'
//
////    ctreVersion = '...'
////    navxVersion = '...'
//
//    smartDashboardVersion = '...'
//    shuffleboardVersion = '...'
//
//    toolchainVersion = '...'
//}

jar {
    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    manifest jaci.openrio.gradle.GradleRIOPlugin.javaManifest('org.sert2521.bunnybots.Robot')
}

test {
    testLogging {
        showStandardStreams = true
    }
}

cobertura {
    coverageFormats = ["html", "xml"]
    coverageExcludes = [".*org.sert2521.bunnybots.Robot", ".*org.sert2521.gamename.OI"]
}

task ktlint(type: JavaExec) {
    main = "com.github.shyiko.ktlint.Main"
    classpath = configurations.ktlint
    args "src/**/*.kt"
}
